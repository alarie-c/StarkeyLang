use std::fmt::Display;
use crate::scanner::token::{Token, TokenKind};

impl Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let span = format!("[{}..{}]", self.span.start, self.span.end);
        match &self.kind {
            TokenKind::LPar => write!(f, "{}: OPEN PAR '('", span),
            TokenKind::RPar => write!(f, "{}: CLOSE PAR ')'", span),
            TokenKind::LBrac => write!(f, "{}: OPEN BRAC '['", span),
            TokenKind::RBrac => write!(f, "{}: CLOSE BRAC ']'", span),
            TokenKind::LCurl => write!(f, "{}: OPEN CURL '{{'", span),
            TokenKind::RCurl => write!(f, "{}: CLOSE CURL '}}'", span),
            TokenKind::Plus => write!(f, "{}: PLUS '+'", span),
            TokenKind::Minus => write!(f, "{}: MINUS '-'", span),
            TokenKind::Star => write!(f, "{}: STAR '*'", span),
            TokenKind::Slash => write!(f, "{}: SLASH '/'", span),
            TokenKind::Modulo => write!(f, "{}: MODULO '%'", span),
            TokenKind::Caret => write!(f, "{}: CARET '^'", span),
            TokenKind::PlusPlus => write!(f, "{}: DOUBLE PLUS '++'", span),
            TokenKind::PlusEqual => write!(f, "{}: PLUS EQUAL '+='", span),
            TokenKind::MinusMinus => write!(f, "{}: DOUBLE MINUS '--'", span),
            TokenKind::MinusEqual => write!(f, "{}: MINUS EQUAL '-='", span),
            TokenKind::StarEqual => write!(f, "{}: STAR EQUAL '*='", span),
            TokenKind::Equal => write!(f, "{}: EQUAL '='", span),
            TokenKind::EqualEqual => write!(f, "{}: DOUBLE EQUAL '=='", span),
            TokenKind::Bang => write!(f, "{}: BANG '!'", span),
            TokenKind::BangEqual => write!(f, "{}: BANG EQUAL '!='", span),
            TokenKind::Less => write!(f, "{}: LESS THAN '<'", span),
            TokenKind::LessEqual => write!(f, "{}: LESS THAN EQUAL '<='", span),
            TokenKind::More => write!(f, "{}: MORE THAN '>'", span),
            TokenKind::MoreEqual => write!(f, "{}: MORE THAN EQUAL '>='", span),
            TokenKind::Amp => write!(f, "{}: AMPERSAND '&'", span),
            TokenKind::AmpAmp => write!(f, "{}: DOUBLE AMPERSAND '&&'", span),
            TokenKind::Bar => write!(f, "{}: BAR '|'", span),
            TokenKind::BarBar => write!(f, "{}: DOUBLE BAR '||'", span),
            TokenKind::LArrow => write!(f, "{}: L_ARROW '->'", span),
            TokenKind::RArrow => write!(f, "{}: R_ARROW '<-'", span),
            TokenKind::SlashSlash => write!(f, "{}: DOUBLE SLASH '//'", span),
            TokenKind::At => write!(f, "{}: AT '@'", span),
            TokenKind::Hash => write!(f, "{}: HASH '#'", span),
            TokenKind::Dollar => write!(f, "{}: DOLLAR '%'", span),
            TokenKind::Semicolon => write!(f, "{}: SEMICOLON ';'", span),
            TokenKind::Colon => write!(f, "{}: COLON ':'", span),
            TokenKind::Question => write!(f, "{}: QUESTION '?'", span),
            TokenKind::Comma => write!(f, "{}: COMMA ','", span),
            TokenKind::Dot => write!(f, "{}: DOT '.'", span),
            TokenKind::Ident(s) => write!(f, "{}: IDENTIFIER '{s}'", span),
            TokenKind::Number(s) => write!(f, "{}: NUMBER '{s}'", span),
            TokenKind::String(s) => write!(f, "{}: STRING '{s}'", span),
            TokenKind::Const => write!(f, "{}: CONST", span),
            TokenKind::Function => write!(f, "{}: FUNCTION", span),
            TokenKind::End => write!(f, "{}: END", span),
            TokenKind::While => write!(f, "{}: WHILE", span),
            TokenKind::For => write!(f, "{}: FOR", span),
            TokenKind::If => write!(f, "{}: IF", span),
            TokenKind::Then => write!(f, "{}: THEN", span),
            TokenKind::Else => write!(f, "{}: ELSE", span),
            TokenKind::Elif => write!(f, "{}: ELIF", span),
            TokenKind::Do => write!(f, "{}: DO", span),
            TokenKind::Break => write!(f, "{}: BREAK", span),
            TokenKind::Continue => write!(f, "{}: CONTINUE", span),
            TokenKind::EOF => write!(f, "{}: EOF", span),
            _ => write!(f, "{}: UNKNOWN, '{:?}'", span, self)
        }
    }
}
